GIT使用 by wooght 2017

-----------------------------------------------------------
安装git 
	yum install git

已安装:
  git.x86_64 0:1.8.3.1-12.el7_4                                                        

作为依赖被安装:
  perl-Error.noarch 1:0.17020-2.el7           perl-Git.noarch 0:1.8.3.1-12.el7_4      
  perl-TermReadKey.x86_64 0:2.30-20.el7      
#安装完毕

-----------------------------------------------------------
#进入文件夹，创建版本库
git init

[root@localhost wooght]# git init
初始化空的 Git 版本库于 /var/www/wooght/.git/

[root@localhost wooght]# vi test.txt
[root@localhost wooght]# ls
test.txt


-----------------------------------------------------------
#添加暂存区
[root@localhost wooght]# git add test.txt
#git add --all 整个文件夹添加到库
#提交到仓库分支 -m "本次提交说明"
[root@localhost wooght]# git commit -m "create test.txt"
[master（根提交） acf3d8d] create test.txt
 Committer: root <root@localhost.localdomain>
您的姓名和邮件地址基于登录名和主机名进行了自动设置。请检查它们正确
与否。您可以通过下面的命令对其进行明确地设置以免再出现本提示信息：

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

设置完毕后，您可以用下面的命令来修正本次提交所使用的用户身份：

    git commit --amend --reset-author

 1 file changed, 4 insertions(+)
 create mode 100644 test.txt
#4 insertions 说明有4行改动

-----------------------------------------------------------
#查看当前仓库状态
[root@localhost wooght]# git status
# On branch master
# Changes not staged for commit: -告诉我们被修改过，但没有提交
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

-----------------------------------------------------------
#查看具体变动
[root@localhost wooght]# git diff
diff --git a/test.txt b/test.txt
index 0a2561e..eb76abd 100644
--- a/test.txt
+++ b/test.txt
@@ -1,4 +1,4 @@
 <?php
        echo "git is ok";
-       echo "SVN is not ok";
+       echo "SVN is not ok,right?";
 ?>


-----------------------------------------------------------
#git log 查看提交日至
[root@localhost wooght]# git log
#git log 添加参数 --pretty=oneline 显示简要日志
[root@localhost wooght]# git log --pretty=oneline

-----------------------------------------------------------
#回退，仓库和工作区都会回退 HEAD指当前版本，HEAD^上一个版本，HEAD~N 上N个版本
[root@localhost wooght]# git reset --hard HEAD^
HEAD is now at bdccc29 add right?

#回到未来的某个版本，--hard 版本号（不需要些全，唯一或者不冲突就行）
[root@localhost wooght]# git reset --hard 361a

#git reflog 查看操作历史
[root@localhost wooght]# git reflog
361a3fe HEAD@{0}: reset: moving to 361a
bdccc29 HEAD@{1}: reset: moving to HEAD^
361a3fe HEAD@{2}: commit: add start
bdccc29 HEAD@{3}: commit: add right?
acf3d8d HEAD@{4}: commit (initial): create test.txt

-----------------------------------------------------------
#暂存区的应用
#git add 添加到暂存区，及暂时修改的内容。等修改完毕后，再git commit提交到分支上。
#工作区--》暂存区--》版本库分支
[root@localhost wooght]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	test2.txt
no changes added to commit (use "git add" and/or "git commit -a")
[root@localhost wooght]# git add test2.txt
[root@localhost wooght]# git add test.txt
[root@localhost wooght]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   test.txt
#	new file:   test2.txt
#
[root@localhost wooght]# git commit -m "add file test2.txt,test.txt add new line"
[master 7b614c8] add file test2.txt,test.txt add new line
 2 files changed, 5 insertions(+)
 create mode 100644 test2.txt
[root@localhost wooght]# git status
# On branch master
nothing to commit, working directory clean
[root@localhost wooght]# 


-----------------------------------------------------------
#丢弃工作区的修改，是工作区，不会改变暂存区和版本库
[root@localhost wooght]# git checkout -- test.txt

-----------------------------------------------------------
#删除文件
[root@localhost wooght]# git rm b.txt
rm 'b.txt'
[root@localhost wooght]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	deleted:    b.txt
#
[root@localhost wooght]# git commit -m 'delete b'
[master 3214c1e] delete b
 1 file changed, 3 deletions(-)
 delete mode 100644 b.txt

-----------------------------------------------------------
#分支
#git branch 查看当前分支
#git branch name 创建name分支
#git checkout name 切换到name分支
#git checkout -b dev
	。。创建dev分支并切换到dev分支
[root@localhost wooght]# git branch dev
[root@localhost wooght]# git branch
  dev
* master
[root@localhost wooght]# git checkout dev
Switched to branch 'dev'
[root@localhost wooght]# git branch
* dev
  master

[root@localhost wooght]# git checkout master
Switched to branch 'master'
[root@localhost wooght]# git branch
  dev
* master
#合并分支 git merge name 在当前分支上合并name分支上的内容
[root@localhost wooght]# git merge dev
Updating b72fcd7..cceba32
Fast-forward --只合并模式
 c.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 c.txt
#删除分支
[root@localhost wooght]# git branch -d dev
Deleted branch dev (was cceba32).
[root@localhost wooght]# git branch
* master


-----------------------------------------------------------
#解决分支冲突
[root@localhost wooght]# git status
# On branch master
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      a.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
[root@localhost wooght]# git status
# On branch master
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      a.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
[root@localhost wooght]# vi a.txt
<<<<<<< HEAD
200djlfj
=======
100djlfj
>>>>>>> dev
#<<<<<<< ======= >>>>> 标注分支上有冲突的地方

-----------------------------------------------------------
#把本地库推送到远程库
#要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

#由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
[root@localhost wooght]# git push -u origin master
Username for 'https://github.com': wooght
Password for 'https://wooght@github.com': 
Counting objects: 42, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (32/32), done.
Writing objects: 100% (42/42), 3.23 KiB | 0 bytes/s, done.
Total 42 (delta 11), reused 0 (delta 0)
remote: Resolving deltas: 100% (11/11), done.
To https://github.com/wooght/laravel_wooght.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
#解除关联
git remote remove origin

#克隆
git clone https://github.com/wooght/handbook.git 文件夹 #克隆到指定文件夹

git pull origin next:master #获取远程next的更新到本地master

git fetch origin #获取远端最新信息
git fetch origin master #获取远端master的最新信息
git diff test origin/xxx 本地test 和远端xxx做比较


-----------------------------
git fetch origin dev
git log -p dev..origin/dev
git merge origin/dev

git fetch origin dev:tmp
git diff tmp
git merge tmp
-----------------------------
以上两部分效果一样,三行意思分别为:
从远端origin的dev分支上下载最新内容
和本地的dev分支上进行比较
最后合并

git checkout tmp config app/Http/Kernel.php #从tmp分支上合并config文件夹及kernel.php到当前



-----------------------------------------------------------
#其他常用命令
git add -i [<path>]命令查看<path>中被所有修改过或已删除文件但没有提交的文件
git add <path> git 修改（不含已删除）的文件，判断出新添的文件，并把它们的信息添加到索引库中。
git add -A: [<path>]表示把<path>中所有tracked文件中被修改过或已删除文件和所有untracted的文件信息添加到索引库


#添加标签
git tag -a v1.4 -m '说明' # 新建标签
git tag  #罗列标签

